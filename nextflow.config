/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/rnadnavar Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Plugins
plugins {
  id 'nf-validation@0.3.1'
}


// Global default params, used in configs
params {

    // Input options - mandatory
    input                      = null  // sample sheet
    step                       = 'mapping' // Starts with mapping
    skip_tools                 = null       // All tools (markduplicates + baserecalibrator + QC) are used by default
    save_bam_mapped            = false      // Mapped BAMs not saved
    save_output_as_bam         = false      //Output files from preprocessing are saved as bam and not as cram files


    // Genome and reference options
    genome                          = 'GRCh38'
    igenomes_base                   = 's3://ngi-igenomes/igenomes'
    igenomes_ignore                 = false
    save_reference                  = false
    save_merged_fastq               = false

    // Sequence read information
    read_length                     = 76 // Required for STAR to build index and align reads TODO: automate
    wes = false       // Set to true, if data is exome/targeted sequencing data. Used to use correct models in various variant callers

    // Alignment
    aligner                         = 'bwa-mem'    // Only STAR is currently supported.
    use_gatk_spark                  = null       // GATK Spark implementation of their tools in local mode not used by default
    star_twopass                    = true
    star_ignore_sjdbgtf             = false     // Ignore GTF file while creating index or alignment by STAR
    star_max_memory_bamsort         = 0         // STAR parameter limitBAMsortRAM to specify maximum RAM for sorting BAM
    star_bins_bamsort               = 50        // STAR parameter outBAMsortingBinsN to specify number of bins for sorting BAM
    star_max_collapsed_junc         = 1000000   // STAR parameter limitOutSJcollapsed to specify max number of collapsed junctions
    seq_center                      = null
    seq_platform                    = 'illumina' // Required for preparing for BAM headers for GATK to work
    bam_csi_index                   = false
    save_unaligned                  = false
    save_align_intermeds            = false
    bwa = null
    bwamem2 = null
    dragmap = null
    hisat2_build_memory = null

    // Skip steps
    skip_baserecalibration          = false
    skip_intervallisttools          = false
    skip_variantfiltration          = false
    skip_variantannotation          = false
    skip_multiqc                    = false

    // Preprocessing of alignment
    remove_duplicates               = false

    // Modify fastqs (trim/split) with FASTP
    trim_fastq          = false // No trimming
    clip_r1             = 0
    clip_r2             = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq        = 0
    split_fastq         = 50000000   // FASTQ files will not be split by default by FASTP
    save_trimmed        = false
    save_trimmed_fail   = false
    save_split_fastqs   = false

    // UMI tagged reads
    umi_read_structure    = null        // no UMI
    group_by_umi_strategy = 'Adjacency' // default strategy when running with UMI for GROUPREADSBYUMI


    // Variant calling
    no_intervals                    = false
    intervals                       = null
    nucleotides_per_second          = 1000
    germline_resource               = null
    germline_resource_tbi           = null
    known_snps                      = null
    known_snps_tbi                  = null
    pon                             = null
    pon_tbi                         = null
    actionablepanel                 = null
    highconfidence                  = null
    knownhot                        = null


    // GATK intervallist parameters
    gatk_interval_scatter_count     = 25
    ignore_soft_clipped_bases       = true
    // Variant annotation
    tools                           = null  // No default Variant_Calling or Annotation tools
    annotate_tools                  = null  // List of annotation tools to run - snpeff or vep or merge
    annotation_cache                = false // Annotation cache disabled
    cadd_cache                      = null // CADD cache disabled
    cadd_indels                     = null // No CADD InDels file
    cadd_indels_tbi                 = null // No CADD InDels index
    cadd_wg_snvs                    = null // No CADD SNVs file
    cadd_wg_snvs_tbi                = null // No CADD SNVs index
    genesplicer                     = null // genesplicer disabled within VEP
    snpeff_cache                    = null // No directory for snpEff cache
    snpeff_db                       = null // No default db for snpeff
    vep_cache                       = null // No directory for VEP cache
    vep_genome                      = null // No default genome for VEP
//    vep_cache_version               = '106' // No default cache version for VEP
//    vep_version               = '106.1' // No default cache version for VEP
    vep_dbnsfp                      = null
    vep_loftee                      = null
    vep_spliceai                    = null
    vep_spliceregion                = null
    vep_out_format                  = 'vcf'

    //filtering
    whitelist                  = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    outdir                     = null
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'symlink'   //'symlink'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 32
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/rnadnavar custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/rnadnavar.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/rnadnavar profiles: ${params.custom_config_base}/pipeline/rnadnavar.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/rnadnavar'
    author          = 'Raquel Manzano-Garcia, Praveen Raj, Maxime U Garcia'
    homePage        = 'https://github.com/nf-core/rnadnavar'
    description     = 'Pipeline for RNA and DNA integrated analysis for somatic mutation detection'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0dev'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
