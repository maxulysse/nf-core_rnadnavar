/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]


// PREPARE_GENOME

    withName: "GTF2BED" {
                publishDir       = [
                enabled: params.save_reference,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reference" },
                pattern: "*bed"
            ]
    }

    withName: 'BWAMEM1_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwa"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem2" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwamem2"
        ]
    }

    withName: 'DRAGMAP_HASHTABLE' {
        ext.when         = { !params.dragmap && params.step == "mapping" && params.aligner == "dragmap" }
        publishDir = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "dragmap"
        ]
    }

     withName: 'STAR_GENOMEGENERATE' {
        ext.args   = params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : ''
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|HISAT2_BUILD|HISAT2_EXTRACTSPLICESITES' {
        publishDir = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/index" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CAT_FASTQ' {
        publishDir = [
            enabled: params.save_split_fastqs,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/bed" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BUILD_INTERVALS' {
        publishDir = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/bed" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_BEDTOINTERVALLIST' {
        publishDir = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/interval_list" },
            pattern: "*.interval_list"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        ext.when         = { !params.dict && params.step != "annotate" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dict" },
            pattern: "*dict"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when         = { !params.fasta_fai && params.step != "annotate" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
    }

    withName: 'TABIX_DBSNP' {
        ext.when         = { !params.dbsnp_tbi && params.dbsnp && (params.step == "mapping" || params.step == "markduplicates" || params.step == "prepare_recalibration") || params.tools && (params.tools.split(',').contains('mutect2')) }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        ext.when         = { !params.germline_resource_tbi && params.germline_resource && params.tools && params.tools.split(',').contains('mutect2') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
    }

        withName: 'TABIX_KNOWN_INDELS' {
        ext.when         = { !params.known_indels_tbi && params.known_indels && (params.step == 'mapping' || params.step == "markduplicates" || params.step == 'prepare_recalibration' || (params.tools && params.tools.split(',').contains('haplotypecaller')) ) }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        ext.when         = { !params.pon_tbi && params.pon && params.tools && params.tools.split(',').contains('mutect2') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
    }

// PREPARE INTERVALS

    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'TABIX_BGZIPTABIX_.*' {
        ext.prefix       = {"${meta.id}.vcf"}
    }

    withName: 'TABIX_BGZIPTABIX_INTERVAL_SPLIT' {
        ext.args2        = "-0 -p bed"
        ext.prefix       = {"${meta.id}"}
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed.gz"
        ]
    }

// BAM TO FASTQ

    withName: 'COLLATE_FASTQ_MAP'{
        ext.args2        = '-N'
        ext.prefix       = {"${meta.id}.mapped"}
        publishDir       = [
            enabled: params.save_split_fastqs,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/fastq" },
            pattern: "*{fq,fastq}*"
        ]
    }

    withName: 'COLLATE_FASTQ_UNMAP'{
        ext.args2        = '-N'
        ext.prefix       = {"${meta.id}.unmapped"}
        publishDir       = [
            enabled: params.save_split_fastqs,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/fastq" },
            pattern: "*{fq,fastq}*"
        ]
    }

    withName: 'SAMTOOLS_VIEW_MAP_MAP' {
        ext.args         = '-b -f1 -F12'
        ext.prefix       = {"${meta.id}.map_map"}
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/fastq" },
            pattern: "*{bam}*"
        ]
    }

    withName: 'SAMTOOLS_VIEW_MAP_UNMAP' {
        ext.args         = '-b -f8 -F260'
        ext.prefix       = {"${meta.id}.map_unmap"}
        publishDir       = [
            enabled: params.save_split_fastqs,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/fastq" },
            pattern: "*{bam}*"
        ]
    }

    withName: 'SAMTOOLS_VIEW_UNMAP_MAP' {
        ext.args         = '-b -f4 -F264'
        ext.prefix       = {"${meta.id}.unmap_map"}
        publishDir       = [
            enabled: params.save_split_fastqs,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/fastq" },
            pattern: "*{bam}*"
        ]
    }

    withName: 'SAMTOOLS_VIEW_UNMAP_UNMAP' {
        ext.args         = '-b -f12 -F256'
        ext.prefix       = {"${meta.id}.unmap_unmap"}
        publishDir       = [
            enabled: params.save_split_fastqs,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/fastq" },
            pattern: "*{bam}*"
        ]
    }

    withName: 'SAMTOOLS_MERGE_UNMAP' {
        ext.prefix       = {"${meta.id}.merged_unmap"}
        publishDir       = [
            //specify to avoid publishing, overwritten otherwise
            enabled: false
        ]
    }

    withName: 'MERGE_BAM' {
        ext.prefix       = {"${meta.id}.merged"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path:  {"${params.outdir}/preprocessing/merged"} ,
            pattern: "*{bam}*"
        ]
    }

// TRIMMING

    withName: FASTP {
        ext.args = [ "-Q",
            params.trim_fastq                                      ?: "--disable_adapter_trimming",
            params.clip_r1 > 0                                     ? "--trim_front1 ${params.clip_r1}" : "", // Remove bp from the 5' end of read 1.
            params.three_prime_clip_r1 > 0                         ? "--trim_tail1 ${params.three_prime_clip_r1}" : "", // Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed.
            params.clip_r2   > 0                                   ? "--trim_front2 ${params.clip_r2}" : "", //Remove bp from the 5' end of read 2.
            params.three_prime_clip_r2 > 0                         ? "--trim_tail2 ${params.three_prime_clip_r2}" : "", // Remove bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed.
            params.trim_nextseq                                    ? "--trim_poly_g" : "", // Apply the --nextseq=X option, to trim based on quality after removing poly-G tails.
            params.split_fastq > 0 && params.no_intervals == false ? "--split_by_lines ${params.split_fastq * 4}" : "",

        ].join(" ").trim()
        publishDir = [
            [
                path: { "${params.outdir}/reports/fastp/${meta.patient}/${meta.sample}/" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json,log}"
            ],
            [
                enabled: params.save_trimmed || params.save_split_fastqs,
                path: { "${params.outdir}/preprocessing/fastq/${meta.patient}/${meta.sample}/" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz"
            ]
        ]
    }



// MAPPING
    if (params.step == 'mapping') {
        withName: ".*BWAMEM1_MEM" {
            ext.when         = { params.aligner == "bwa-mem" }
        }
        withName: ".*BWAMEM2_MEM" {
            ext.when         = { params.aligner == "bwa-mem2" }
        }

        withName: ".*DRAGMAP_ALIGN" {
            ext.when         = { params.aligner == "dragmap" }
            ext.args         = { "--RGSM ${meta.read_group}" }
        }

        withName: ".*:GATK4_MAPPING:(BWAMEM.*_MEM|DRAGMAP_ALIGN)" {
            // Markduplicates Spark NEEDS name-sorted reads or runtime goes through the roof
            // However if it's skipped, reads need to be coordinate-sorted
            // Only name sort if Spark for Markduplicates + duplicate marking is not skipped
            ext.args2        = { params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates') && (!params.skip_tools || (params.skip_tools && !params.skip_tools.split(',').contains('markduplicates'))) ? '-n' : '' }
            ext.prefix       = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.tokenize('.')[0]) : "" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/" },
                pattern: "*bam",
                saveAs: { (params.save_bam_mapped || (params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) && (meta.size * meta.numLanes == 1) ? "mapped/${meta.patient}/${meta.id}/${it}" : null }
            ]
        }

        withName: ".*:GATK4_MAPPING:BWAMEM.*_MEM" {
            // Parameters from TCGA
            ext.args         = { "-T 0 -R ${meta.read_group}"}
        }

        withName: ".*:MAPPING:MERGE_INDEX_BAM:INDEX_MERGE_BAM" {
        publishDir       = [
                            path: { "${params.outdir}/preprocessing/" },
                            mode: params.publish_dir_mode,
                            pattern: "*.{bai,csi}",
                            saveAs: { params.save_bam_mapped ? "mapped/${meta.patient}/${meta.id}/${it}" : null }
                            ]

        }

    }


// ALIGN_STAR
    withName: STAR_ALIGN {
        ext.args   = [
            '--outSAMtype BAM SortedByCoordinate',
            '--readFilesCommand zcat',
            '--outFilterMultimapScoreRange 1',
            '--outFilterMultimapNmax 20',
            '--outFilterMismatchNmax 10',
            '--alignMatesGapMax 1000000',
            '--sjdbScore 2',
            '--alignSJDBoverhangMin 1',
            '--genomeLoad NoSharedMemory',
            '--outFilterMatchNminOverLread 0.33',
            '--outFilterScoreMinOverLread 0.33',
            '--twopass1readsN -1',
            params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
            params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : '',
            params.star_twopass ? '--twopassMode Basic' : '',
            params.star_max_memory_bamsort > 0 ? "--limitBAMsortRAM ${params.star_max_memory_bamsort}" : "",
            params.star_bins_bamsort > 0 ? "--outBAMsortingBinsN ${params.star_bins_bamsort}" : "",
            params.star_max_collapsed_junc > 0 ? "--limitOutSJcollapsed ${params.star_max_collapsed_junc}" : ""
        ].join(' ').trim()
        ext.args2   = { "--outSAMattrRGline ${meta.read_group}" }
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.tokenize('.')[0]) : "" }
        publishDir = [
            [
                path: { "${params.outdir}/reports/star/${meta.patient}/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/preprocessing/star/${meta.patient}/${meta.id}/mapped/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/preprocessing/star/${meta.patient}/${meta.id}/unmapped/" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_align_intermeds
            ]
        ]
    }

// ALIGN_HISAT2
    withName: '.*:ALIGN_HISAT2:HISAT2_ALIGN' {
            ext.args   = '--met-stderr --new-summary'
            publishDir = [
                [
                    path: { "${params.outdir}/report/hisat2/${meta.patient}/${meta.id}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log',
                    enabled: params.save_align_intermeds
                ],
                [
                    path: { "${params.outdir}/preprocessing/hisat2/${meta.patient}/${meta.id}/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    enabled: params.save_align_intermeds
                ],
                [
                    path: { "${params.outdir}/preprocessing/hisat2/${meta.patient}/${meta.id}/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }

// POST ALIGNMENT AND PREPROCESSING BAM
    withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('') : "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                saveAs: { (params.save_bam_mapped || (params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) && (meta.size * meta.numLanes == 1) ? "mapped/${meta.patient}/${meta.id}/${it}" : null }

        ]
    }
    withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]) : "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/reports/samtools/${meta.patient}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.flagstat",
            enabled: params.save_align_intermeds
        ]
    }


     withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(input.name.tokenize('.')[1]) : "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/reports/samtools/${meta.patient}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.stats",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(input.name.tokenize('.')[1]) : "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/reports/samtools/${meta.patient}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.idxstats",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned') : "${meta.id}.aligned" }
        publishDir = [
               path: { "${params.outdir}/preprocessing/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bai,csi}",
                saveAs: { (params.save_bam_mapped || (params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) && (meta.size * meta.numLanes == 1) ? "mapped/${meta.patient}/${meta.id}/${it}" : null }

        ]
    }

    withName: '.*:ALIGN_HISAT2:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned_hs2') : "${meta.id}.aligned_hs2" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/hisat2/${meta.patient}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:ALIGN_HISAT2:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned_hs2') : "${meta.id}.aligned_hs2" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/hisat2/${meta.patient}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:ALIGN_HISAT2:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned_hs2') : "${meta.id}.aligned_hs2" }
        publishDir = [
            path: { "${params.outdir}/reports/samtools/${meta.patient}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:ALIGN_HISAT2:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(input.name.tokenize('.aligned_hs2')[1]) : "${meta.id}.aligned_hs2" }
        publishDir = [
            path: { "${params.outdir}/reports/samtools/${meta.patient}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.idxstats",
            enabled: params.save_align_intermeds
        ]
    }

// MARKDUPLICATES
    // General args, specific options are set somewhere else
    withName: 'SAMTOOLS_CRAMTOBAM.*'{
        ext.args         = "-b"
    }

    withName: 'SAMTOOLS_STATS_CRAM'{
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${meta.id}.sorted.cram" : "${meta.id}.md.cram" }
    }

    withName: 'SAMTOOLS_BAMTOCRAM.*' {
        // BAM provided for step Markduplicates either run through MD or Convert -> then saved as md.cram
        // BAM files provided for step prepare_recal are converted and run through BQSR -> then saved as md.cram
        // BAM files provided for step recal are converted and run through BQSR II -> then saved as md.cram
        ext.args         = "-C"
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${meta.id}.sorted" : "${meta.id}.md" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${params.outdir}/preprocessing/mapped/${meta.patient}/${meta.id}/" : "${params.outdir}/preprocessing/markduplicates/${meta.patient}/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: '.*:BAM_TO_CRAM_SNCR:SAMTOOLS_BAMTOCRAM.*' {
        // BAM provided for step splitncigar either run through MD or Convert -> then saved as sncr.cram
        // BAM files provided for step prepare_recal are converted and run through BQSR -> then saved as sncr.cram
        // BAM files provided for step recal are converted and run through BQSR II -> then saved as sncr.cram
        ext.args         = "-C"
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('splitncigar')) ? "${meta.id}.sorted" : "${meta.id}.sncr" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { (params.skip_tools && params.skip_tools.split(',').contains('splitncigar')) ? "${params.outdir}/preprocessing/mapped/${meta.patient}/${meta.id}/" : "${params.outdir}/preprocessing/splitncigar/${meta.patient}/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
    }


    withName: 'GATK4_INTERVALLISTTOOLS' {
        ext.args   = [
            '--SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW',
            '--UNIQUE true',
            '--SORT true',
            params.gatk_interval_scatter_count ? "--SCATTER_COUNT $params.gatk_interval_scatter_count" : ''
        ].join(' ').trim()
        publishDir  = [ enabled: false ]
    }

    // TODO add snc prefix here
    withName: '.*:SPLITNCIGAR:GATK4_SPLITNCIGARREADS' {
        ext.args    =  ['-rf ReassignOneMappingQuality',
                        '-RMQF 255 ',
                        '-RMQT 60',
                        '-U ALLOW_N_CIGAR_READS'].join(' ').trim()
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/splitncigar/${meta.patient}/${meta.id}/" },
            pattern: "*{bam,bai}",
            enabled: params.save_align_intermeds // will be saved as CRAM
        ]
    }

    withName: '.*:SECOND_RUN:GATK_PREPROCESSING:SPLITNCIGAR:GATK4_SPLITNCIGARREADS' {
        ext.prefix  =  {"${meta.id}.sncr"}
        ext.args    =  ['-rf ReassignOneMappingQuality',
                        '-RMQF 255 ',
                        '-RMQT 60',
                        '-U ALLOW_N_CIGAR_READS'].join(' ').trim()
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/splitncigar/${meta.patient}/${meta.id}/" },
            pattern: "*{bam,bai}",
            enabled: params.save_align_intermeds // will be saved as CRAM
        ]
    }

    withName: ".*:PREPARE_SECOND_RUN:MERGE_ALIGN:INDEX_MERGE_BAM" {
        publishDir       = [
                            mode: params.publish_dir_mode,
                            path: { "${params.outdir}/preprocessing/" },
                            pattern: "*.{bai,csi}",
                            saveAs: { params.save_bam_mapped ? "second_run/${meta.patient}/${meta.id}/${it}" : null },
                            enabled: params.save_align_intermeds
                            ]

        }

    withName: '.*:SPLITNCIGAR:SAMTOOLS_INDEX' {
        ext.args    =  params.bam_csi_index ? '-c' : ''
        publishDir = [
            path: { "${params.outdir}/preprocessing/splitncigar/${meta.patient}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }


    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        ext.prefix       = { "${meta.id}.md.bam" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) }
        publishDir       = [
            [
                enabled: !params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
                pattern: "*{cram,crai}"
            ],
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/" },
                pattern: "*metrics",
                saveAs: { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates_report')) ? "markduplicates/${meta.id}/${it}" : null}
            ]
        ]
    }

//    withName: 'INDEX_MARKDUPLICATES' {
//        publishDir       = [
//            enabled: !params.save_output_as_bam,
//            mode: params.publish_dir_mode,
//            path: { "${params.outdir}/preprocessing/markduplicates/${meta.patient}/${meta.id}/" },
//            pattern: "*{cram,crai}"
//        ]
//    }

    if (params.use_gatk_spark && params.use_gatk_spark.split(',').contains('markduplicates')) {
        withName: '.*:GATK_PREPROCESSING:MARKDUPLICATES_SPARK:SAMTOOLS_CRAMTOBAM'{
            ext.prefix       = { "${meta.id}.md" }
            ext.when         = { params.save_output_as_bam}
            publishDir       = [
                enabled: params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/markduplicates/${meta.patient}/${meta.id}/" },
                pattern: "*{md.bam,md.bam.bai}"
            ]
        }
    }

    // PREPARE_RECALIBRATION
    withName: 'GATK4_BASERECALIBRATOR|BASERECALIBRATOR' {
        ext.args         = { meta.status == 2 ? "--lenient" : "" }
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.recal" : "${meta.id}_${intervals.simpleName}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/" },
            pattern: "*table",
            saveAs: { meta.num_intervals > 1 ? null : "recal_table/${meta.patient}/${meta.id}/${it}" }
        ]
    }

    withName: 'GATHERBQSRREPORTS' {
        ext.prefix       = {"${meta.id}.recal"}
        ext.when         = { meta.num_intervals > 1 }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recal_table/${meta.patient}/${meta.id}/" },
            pattern: "*table"
        ]
    }

// RECALIBRATE

    withName: 'APPLYBQSR|APPLYBQSR_SPARK' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.recal" : "${meta.id}_${intervals.simpleName}.recal" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/" },
            pattern: "*cram",
            saveAs: { meta.num_intervals > 1 ? null : "recalibrated/${meta.patient}/${meta.id}/${it}" }
        ]
    }


    if ((params.step == 'mapping' || params.step == 'markduplicates'|| params.step == 'prepare_recalibration'|| params.step == 'recalibrate') && (!(params.skip_tools && params.skip_tools.split(',').contains('baserecalibrator')))) {
        withName: '.*:GATK_PREPROCESSING:(RECALIBRATE|RECALIBRATE_SPARK):MERGE_INDEX_CRAM:MERGE_CRAM' {
            ext.prefix       = { "${meta.id}.recal" }
            ext.when         = { meta.num_intervals > 1 }
            publishDir       = [
                enabled: !params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/recalibrated/${meta.patient}/${meta.id}/" },
                pattern: "*cram"
            ]
        }

        withName: '.*:GATK_PREPROCESSING:(RECALIBRATE|RECALIBRATE_SPARK):MERGE_INDEX_CRAM:MERGE_CRAM' {
            publishDir       = [
                enabled: !params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/recalibrated/${meta.patient}/${meta.id}/" },
                pattern: "*{recal.cram,recal.cram.crai}"
            ]
        }
    }

    withName: 'SAMTOOLS_CRAMTOBAM_RECAL'{
        ext.prefix       = { "${meta.id}.recal" }
        ext.when         = { params.save_output_as_bam}
        publishDir       = [
            enabled: params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recalibrated/${meta.patient}/${meta.id}/" },
            pattern: "*{recal.bam,recal.bam.bai}"
        ]
    }

    withName: 'SAMTOOLS_BAMTOCRAM_VARIANTCALLING' {
        ext.prefix       = { "${meta.id}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recalibrated/${meta.patient}/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
    }

// QC

    withName: 'FASTQC' {
        errorStrategy    = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args         = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('fastqc')) }
        publishDir       = [
            [
                path: { "${params.outdir}/reports/fastqc/${meta.patient}/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
    }

    if (params.step == 'mapping' || params.step == 'markduplicates') {
        withName: '.*:GATK_PREPROCESSING:CRAM_QC:SAMTOOLS_STATS' {
            ext.prefix       = { "${meta.id}.cram" }
        }
    }

    withName: 'SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools/${meta.patient}/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MOSDEPTH' {
        ext.args = { !params.wes ? "-n --fast-mode --by 500" : ""}
        ext.prefix       = { params.skip_tools && params.skip_tools.split(',').contains('markduplicates') ? "${meta.id}.sorted" : "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/mosdepth/${meta.patient}/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    if ((params.step == 'mapping' || params.step == 'markduplicates'|| params.step == 'prepare_recalibration'|| params.step == 'recalibrate') && (!(params.skip_tools && params.skip_tools.split(',').contains('baserecalibrator')))) {
        withName: '.*:GATK_PREPROCESSING:CRAM_QC:MOSDEPTH' {
            ext.prefix       = { "${meta.id}.recal" }
        }

        withName: '.*:GATK_PREPROCESSING:CRAM_QC:SAMTOOLS_STATS' {
            ext.prefix       = { "${meta.id}.recal.cram" }
            ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/samtools/${meta.patient}/${meta.id}" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    // STRELKA
    withName: 'STRELKA_.*' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.strelka" : "${meta.id}.strelka.${target_bed.simpleName}" }
        ext.args         = {params.wes || meta.status >= 2 ? "--exome" : "" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : "strelka/${meta.patient}/${meta.id}/${it}" },
            enabled: false // vcf with snvs and indels together already stored
        ]
    }

        withName: 'MERGE_STRELKA' {
        ext.prefix       = {"${meta.id}.strelka.variants"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/strelka/${meta.patient}/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            enabled: true // vcf with snvs and indels together
        ]
    }

    withName: 'MERGE_STRELKA_INDELS' {
        ext.prefix       = {"${meta.id}.strelka.somatic_indels"}
        publishDir       = [ enabled:false ]
    }
    withName: 'MERGE_STRELKA_SNVS' {
        ext.prefix       = {"${meta.id}.strelka.somatic_snvs"}
        publishDir       = [ enabled:false ]
    }


    //MANTA
    withName: 'MERGE_MANTA.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/manta/${meta.patient}/${meta.id}/" },
            pattern: "*{diploid_sv,tumor_sv,somatic_sv}.{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'MERGE_MANTA_DIPLOID' {
        ext.prefix       = {"${meta.id}.manta.diploid_sv"}
    }
    withName: 'MERGE_MANTA_SMALL_INDELS' {
        ext.prefix       = {"${meta.id}.manta.candidate_small_indels"}
    }
    withName: 'MERGE_MANTA_SV' {
        ext.prefix       = {"${meta.id}.manta.candidate_sv"}
    }
    withName: 'MANTA.*' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.manta" : "${meta.id}.manta.${target_bed.simpleName}" }
        ext.args         = { params.wes|| meta.status >= 2 ? "--exome" : "" }
        ext.when         = { params.tools && params.tools.split(',').contains('manta') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{diploid_sv,tumor_sv,somatic_sv}.{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : "manta/${meta.patient}/${meta.id}/${it}" }
        ]
    }

    withName: 'MERGE_MANTA_SOMATIC' {
        ext.prefix       = {"${meta.id}.manta.somatic_sv"}
    }

    withName: '.*FREEBAYES.*' {
        ext.when         = { params.tools && params.tools.split(',').contains('freebayes') }
    }

    withName: '.*SAGE.*' {
        ext.when         = { params.tools && params.tools.split(',').contains('sage') }
    }

    withName: '.*:PAIR_VARIANT:GATK_*' {
        ext.when         = { params.tools && params.tools.split(',').contains('mutect2') }
    }

    withName: '.*STRELKA*' {
        ext.when         = { params.tools && params.tools.split(',').contains('strelka') }
    }

    withName: 'MANTA.*' {
        ext.when         = { params.tools && params.tools.split(',').contains('manta') }
    }




    //FREEBAYES

    withName: 'MERGE_FREEBAYES' {
        ext.prefix       = { "${meta.id}.freebayes" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/freebayes/${meta.patient}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FREEBAYES' {
        //To make sure no naming conflicts ensure with module BCFTOOLS_SORT & the naming being correct in the output folder
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}" : "${meta.id}.${target_bed.simpleName}" }
        ext.args         = "--pooled-continuous \
                            --pooled-discrete \
                            --genotype-qualities \
                            --report-genotype-likelihood-max \
                            --allele-balance-priors-off \
                            --min-alternate-fraction 0.001 \
                            --min-repeat-entropy 1 \
                            --min-alternate-count 1 "
        ext.when         = { params.tools && params.tools.split(',').contains('freebayes') }
        publishDir       = [enabled: false]
    }

    withName: 'VCFFILTER' {
        //To make sure no naming conflicts ensure with module BCFTOOLS_SORT & the naming being correct in the output folder
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}.filtered" }
        ext.args         = '-f "QUAL > 1 & QUAL / AO > 10 & SAF > 0 & SAR > 0 & RPR > 1 & RPL > 1" -t PASS -F FAIL'
        ext.when         = { params.tools && params.tools.split(',').contains('freebayes') }
        publishDir       = [enabled: false]
    }

     withName: '.*:RUN_FREEBAYES_SOMATIC:BCFTOOLS_SORT' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.freebayes" : "${vcf.minus("vcf.gz")}.sort" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*vcf.gz",
            saveAs: { meta.num_intervals > 1 ? null : "freebayes/${meta.patient}/${meta.id}/${it}" }
        ]
    }

    withName : 'TABIX_VC_FREEBAYES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/freebayes/${meta.patient}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SAGE
    withName: 'SAGE' {
        ext.prefix       = { intervals ? "${meta.id}.sage.${intervals.simpleName}" : "${meta.id}.sage" }
        ext.args         = "-ref_genome_version 38  \
                            -bqr_enabled true \
                            -write_bqr_plot true \
                            -hard_min_tumor_qual 50 \
                            -hotspot_min_tumor_qual 20 \
                            -high_confidence_min_tumor_qual 20 \
                            -validation_stringency LENIENT \
                            -low_confidence_min_tumor_vaf 0.005 \
                            -hotspot_min_tumor_vaf 0.005 \
                            -read_context_flank_size 20 \
                            -max_read_depth 10000 "
        ext.when         = { params.tools && params.tools.split(',').contains('sage') }
        publishDir       = [enabled: false] // will be saved with bcfsort

    }

    withName: 'MERGE_SAGE' {
        ext.prefix       = {"${meta.id}.sage"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/sage/${meta.patient}/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName : 'TABIX_VC_SAGE' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/sage/${meta.patient}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

     withName: '.*:RUN_SAGE_SOMATIC:BCFTOOLS_SORT' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.sage" : "${vcf.minus("vcf.gz")}.sage.sort" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : "sage/${meta.patient}/${meta.id}/${it}" },
            enabled: true
        ]
    }


    //MUTECT2
    withName: '.*:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MUTECT2'{
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        ext.when         = { params.tools && params.tools.split(',').contains('mutect2') }
        ext.args         = { params.ignore_soft_clipped_bases ?
                            "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --smith-waterman FASTEST_AVAILABLE --normal-sample ${meta.normal_id} --callable-depth 1 " :
                            "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --smith-waterman FASTEST_AVAILABLE --normal-sample ${meta.patient}_${meta.normal_id} --callable-depth 1 " }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{vcf.gz,vcf.gz.tbi,stats}",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.patient}/${meta.id}/${it}" }
        ]
    }


    withName: '.*:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:CALCULATECONTAMINATION' {
        ext.prefix       = { "${meta.id}.mutect2" }
        ext.args         = { "-tumor-segmentation ${meta.id}.mutect2.segmentation.table" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "mutect2/${meta.patient}/${meta.id}/${filename}" }
        ]
    }


    withName: '.*:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MERGE_MUTECT2.*' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.patient}/${meta.id}" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }



    withName: '.*:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:FILTERMUTECTCALLS'{
        ext.prefix       = {"${meta.id}.mutect2.filtered"}
        ext.args         = { [meta.status >= 2 ? '--max-events-in-region 5': '',
                              meta.cont && !(meta.cont.endswith("NO_TABLE"))      ? '--contamination-table ${meta.cont}' :'',
                              meta.seg && !(meta.seg.endswith("NO_SEG"))         ? '--tumor-segmentation ${meta.seg}':'',
                              meta.orient && !(meta.orient.endswith("NO_ARTPRIOR"))? '--orientation-bias-artifact-priors ${meta.orient}':''
                              ].join(' ').trim()
                           }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "mutect2/${meta.patient}/${meta.id}/${filename}" }
        ]
    }



    withName: '.*:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:GATHERPILEUPSUMMARIES_.*' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.patient}/${meta.tumor_id}_vs_${meta.normal_id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }



    withName: '.*:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:GETPILEUPSUMMARIES_.*' {
        ext.prefix        = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        publishDir        = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*.table",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.patient}/${meta.tumor_id}_vs_${meta.normal_id}/${it}" }
        ]
    }



    withName: '.*:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:LEARNREADORIENTATIONMODEL'{
        ext.prefix       = { "${meta.id}.mutect2.artifactprior" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.patient}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }



    withName: '.*:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MERGEMUTECTSTATS' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.patient}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }



    // VCF QC
    withName: 'BCFTOOLS_STATS'{
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('bcftools')) }
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/bcftools/${meta.variantcaller}/${meta.patient}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_.*'{
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('vcftools')) }
        ext.prefix       = { "${variant_file.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/vcftools/${meta.variantcaller}/${meta.patient}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_TSTV_COUNT'{
        ext.args         = "--TsTv-by-count"
    }

    withName: 'VCFTOOLS_TSTV_QUAL'{
        ext.args         = "--TsTv-by-qual"
    }

    withName: 'VCFTOOLS_SUMMARY'{
        ext.args         = "--FILTER-summary"
    }

    // VT
    // TODO: stats are not going to the report dir - no idea why
    withName: 'VT_DECOMPOSE'{
        ext.args         = ""
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}.dec" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/vt/" },
                pattern: {'*dec.stats'},
                saveAs: {"${meta.variantcaller}/${meta.patient}/${meta.id}/${it}"},
                enabled: true
            ],
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/" },
                pattern: {"*{vcf.gz,vcf.gz.tbi}"},
                saveAs: {"${meta.variantcaller}/${meta.patient}/${meta.id}/${it}"},
                enabled: false // store normalised results only
            ]
        ]
    }

    withName: 'VT_NORMALIZE'{
        ext.args         = {"-n"}
        ext.prefix       = { "${vcf.baseName.minus(".dec.vcf")}.norm" }
         publishDir      = [[
                path: { "${params.outdir}/variant_calling/" },
                pattern: "*{vcf.gz,vcf.gz.tbi,norm.stats}",
                saveAs: { "${meta.variantcaller}/${meta.patient}/${meta.id}/${it}" },
                enabled: true // just store normalised results
        ],
        [mode: params.publish_dir_mode,
        path: { "${params.outdir}/reports/vt/${meta.variantcaller}/${meta.patient}/${meta.id}/" },
                pattern: "*stats"
        ]]
    }

    withName: 'ENSEMBLVEP' {
        ext.args          = { [
            '--no_progress --offline --shift_hgvs 1 --check_existing --tsl --domains --total_length --allele_number --no_escape --xref_refseq --failed 1 --flag_pick_allele --pick_order canonical,tsl,biotype,rank,ccds,length --format vcf --biotype --force_overwrite --sift p --polyphen p --variant_class --regulatory --allele_number --af_gnomad --af_gnomadg --gene_phenotype --hgvs --hgvsg --max_af',
            (params.vep_dbnsfp && params.dbnsfp && !params.dbnsfp_consequence)    ? "--plugin dbNSFP,${params.dbnsfp.split("/")[-1]},${params.dbnsfp_fields}"                                              : '',
            (params.vep_dbnsfp && params.dbnsfp && params.dbnsfp_consequence)     ? "--plugin dbNSFP,'consequence=${params.dbnsfp_consequence}',${params.dbnsfp.split("/")[-1]},${params.dbnsfp_fields}"   : '',
            (params.vep_loftee)                                                   ? "--plugin LoF,loftee_path:/opt/conda/envs/nf-core-vep-${params.vep_version}/share/ensembl-vep-${params.vep_version}-0" : '',
            (params.vep_spliceai && params.spliceai_snv && params.spliceai_indel) ? "--plugin SpliceAI,snv=${params.spliceai_snv.split("/")[-1]},indel=${params.spliceai_indel.split("/")[-1]}"            : '',
            (params.vep_spliceregion)                                             ? '--plugin SpliceRegion'                                                                                                : '',
            (params.vep_out_format)                                               ? "--${params.vep_out_format}"                                                                                           : '--vcf'
        ].join(' ').trim() }
        ext.prefix       = { "${meta.id}_VEP.${meta.variantcaller}" }
        if (params.vep_cache) {
            container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
            }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variants/annotated/unfiltered/${meta.patient}/" },
                pattern: "*.vcf.gz"
            ],
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/EnsemblVEP/${meta.variantcaller}/${meta.patient}/${meta.id}/" },
                pattern: "*html"
            ]
        ]
    }

//    withName: '.*:ANNOTATION_ENSEMBLVEP:TABIX_BGZIPTABIX' {
//     ext.prefix       = { "${meta.id}_VEP.vcf" }
//     publishDir       = [
//                mode: params.publish_dir_mode,
//                path: { "${params.outdir}/reports/EnsemblVEP/${meta.variantcaller}/${meta.patient}/${meta.id}/" },
//                pattern: "*.vcf.gz"
//            ]
//    }

    withName: "GATK4_FILTERSAMREADS" {
            ext.prefix = { "${bam.baseName.minus(".bam")}_filtered"}
            ext.args = { "--READ_LIST_FILE $read_ids --FILTER includeReadList --VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true" }
            publishDir = [
                enabled: params.save_align_intermeds,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/second_pass/bams/${meta.patient}/${meta.id}/" },
                pattern: "*{.bam,.bai}"
                ]
        }

    withName: "EXTRACT_READ_IDS" {
                publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/second_pass/readids/${meta.patient}/${meta.id}/" },
                pattern: "*{.txt}"
            ]
    }

    withName: "MAF2BED" {
                publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/second_pass/maf2bed/${meta.patient}/${meta.id}/" },
                pattern: "*{maf,maf.gz}"
            ]
            }


    withName: 'RUN_CONSENSUS' {
               ext.prefix = { "${meta.id}.consensus"}
               ext.args = {"--id=${meta.id}"}
                publishDir       = [
                        mode: params.publish_dir_mode,
                        path: { "${params.outdir}/variant_calling/consensus/${meta.patient}/${meta.id}/" },
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        enabled: true
            ]
    }

    withName: 'RUN_CONSENSUS_RESCUE_DNA' {
               ext.prefix = { "${meta.id}.withRNA.consensus"}
               ext.args = {"--id=${meta.id}_withRNAConsensus"}
                publishDir       = [
                        mode: params.publish_dir_mode,
                        path: { "${params.outdir}/variant_calling/consensus/${meta.patient}/${meta.id}/" },
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        enabled: true
            ]
    }

    withName: 'RUN_CONSENSUS_RESCUE_RNA' {
               ext.prefix = { "${meta.id}.withDNA.consensus"}
               ext.args = {"--id=${meta.id}_withDNAConsensus"}
                publishDir       = [
                        mode: params.publish_dir_mode,
                        path: { "${params.outdir}/variant_calling/consensus/${meta.patient}/${meta.id}/" },
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        enabled: true
            ]
    }

    withName: "VCF2MAF" {
            ext.args =  { [
                "--inhibit-vep",
                "--normal-id ${meta.normal_id}",
                "--tumor-id ${meta.tumor_id}",
                "--vcf-tumor-id ${meta.tumor_id}",
                "--vcf-normal-id ${meta.normal_id}",
                "--max-subpop-af 0.0001",
                "--retain-ann gnomADg_AF,MAX_AF,MAX_AF_POPS",
                "--retain-fmt AD,DP,AF,GT",
                params.vep_genome              ? "--ncbi-build ${params.vep_genome}"              : '',
                meta.variantcaller == "strelka"? "--vcf-tumor-id TUMOR --vcf-normal-id NORMAL"    : ''
            ].join(' ').trim() }
            ext.prefix     = { "${meta.id}.${meta.variantcaller}" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variants/annotated/unfiltered/${meta.patient}/${meta.id}/" },
                pattern: "*{maf,maf.gz}"
            ]
        }

    withName: "FILTERING" {
                ext.prefix = { "${meta.id}.filtered"}
                ext.args   = { [params.whitelist? "--whitelist ${params.whitelist}": "",
                                params.blacklist? "--blacklist ${params.blacklist}": ""].join(' ').trim() }
                publishDir = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variants/annotated/filtered/${meta.patient}/${meta.id}/" },
                pattern: "*{maf,maf.gz}"
            ]
            }

    withName: 'SAMTOOLS_MERGE_SECOND_PASS' {
            ext.prefix       = {"${meta.id}.merged_2ndpass"}
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/second_pass/input/${meta.patient}/${meta.id}/" },
                pattern: "*{bam}",
                enabled: params.save_align_intermeds
            ]
    }



    withName: 'RNA_FILTERING' {
            ext.prefix       = {"${meta.id}.rna_filt"}
            ext.args   = { [params.rnaedits?       "--rnaedits ${params.rnaedits}": "",
                            params.rna_pon?        "--pon   ${params.rna_pon}"    : "",
                            params.chain?          "--chain ${params.chain}"      : "",
                            params.fasta19?        "--ref19 ${params.fasta19}"    : "",
                            params.rna_pon19?      "--pon19 ${params.rna_pon19}"  : ""
                            ].join(' ').trim() }

            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variants/annotated/filtered/${meta.patient}/${meta.id}/" },
                pattern: "*{maf}",
                enabled: true
            ]
    }


    // MULTIQC

    withName: MULTIQC {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/reports"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: !params.skip_multiqc
        ]
        errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }



}
